// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/farms": {
            "get": {
                "description": "Get all farms with optional filters (e.g., crop type, land area)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Farm"
                ],
                "summary": "List all farms",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "per_page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Crop Type Filter",
                        "name": "crop_type",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Minimum Land Area",
                        "name": "minimum_land_area",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Maximum Land Area",
                        "name": "maximum_land_area",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Farms",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Farm"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/shared.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/shared.CustomError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new farm with crop production details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Farm"
                ],
                "summary": "Create a new farm",
                "parameters": [
                    {
                        "description": "Farm Data",
                        "name": "farm",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateFarmDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Farm Created",
                        "schema": {
                            "$ref": "#/definitions/domain.Farm"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/shared.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/shared.CustomError"
                        }
                    }
                }
            }
        },
        "/farms/{id}": {
            "delete": {
                "description": "Deletes a farm by its unique ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Farm"
                ],
                "summary": "Delete a farm by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Farm ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/shared.CustomError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/shared.CustomError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/shared.CustomError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.CropProduction": {
            "type": "object",
            "properties": {
                "crop_type": {
                    "type": "string"
                },
                "farm_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_insured": {
                    "type": "boolean"
                },
                "is_irrigated": {
                    "type": "boolean"
                }
            }
        },
        "domain.Farm": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "crop_productions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.CropProduction"
                    }
                },
                "deleted_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "land_area": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "unit_measure": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dto.CreateFarmDTO": {
            "type": "object",
            "required": [
                "address",
                "land_area",
                "name",
                "unit_measure"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "crop_productions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CropProductionDTO"
                    }
                },
                "land_area": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "unit_measure": {
                    "type": "string"
                }
            }
        },
        "dto.CropProductionDTO": {
            "type": "object",
            "required": [
                "crop_type"
            ],
            "properties": {
                "crop_type": {
                    "type": "string",
                    "enum": [
                        "RICE",
                        "CORN",
                        "COFFEE",
                        "SOYBEANS"
                    ]
                },
                "is_insured": {
                    "type": "boolean"
                },
                "is_irrigated": {
                    "type": "boolean"
                }
            }
        },
        "shared.CustomError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/specification/         https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Swagger Farms API",
	Description:      "This is a farms API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
